'\" t
.\" Manual page created with latex2man on Thu Mar  9 08:56:23 EST 2023
.\" NOTE: This file is generated, DO NOT EDIT.
.de Vb
.ft CW
.nf
..
.de Ve
.ft R

.fi
..
.TH "LIBUNWIND\-NTO" "3" "09 March 2023" "Programming Library " "Programming Library "
.SH NAME
libunwind\-nto
\-\- QNX Neutrino support in libunwind 
.PP
.SH SYNOPSIS

.PP
#include <libunwind\-nto.h>
.br
.PP
unw_accessors_t
unw_nto_accessors;
.br
.PP
void *unw_nto_create(pid_t,
pthread_t);
.br
void
unw_nto_destroy(void *);
.br
.PP
int
unw_nto_find_proc_info(unw_addr_space_t,
unw_word_t,
unw_proc_info_t *,
int,
void *);
.br
void
unw_nto_put_unwind_info(unw_addr_space_t,
unw_proc_info_t *,
void *);
.br
int
unw_nto_get_dyn_info_list_addr(unw_addr_space_t,
unw_word_t *,
void *);
.br
int
unw_nto_access_mem(unw_addr_space_t,
unw_word_t,
unw_word_t *,
int,
void *);
.br
int
unw_nto_access_reg(unw_addr_space_t,
unw_regnum_t,
unw_word_t *,
int,
void *);
.br
int
unw_nto_access_fpreg(unw_addr_space_t,
unw_regnum_t,
unw_fpreg_t *,
int,
void *);
.br
int
unw_nto_get_proc_name(unw_addr_space_t,
unw_word_t,
char *,
size_t,
unw_word_t *,
void *);
.br
int
unw_nto_resume(unw_addr_space_t,
unw_cursor_t *,
void *);
.br
.PP
.SH DESCRIPTION

.PP
The QNX operating system makes it possible for a process to 
gain access to the machine\-state and virtual memory of \fIanother\fP
process. 
With the right set of call\-back routines, 
it is therefore possible to hook up libunwind
to another process. 
While it\&'s not very difficult to do so directly, 
libunwind
further facilitates this task by providing 
ready\-to\-use callbacks for this purpose. 
The routines and variables 
implementing this facility use a name\-prefix of unw_nto,
which is stands for ``unwind\-via\-nto\&''\&. 
.PP
An application that wants to use the unw_nto\-facility
first needs 
to create a new libunwind
address\-space that represents the 
target process. This is done by calling 
unw_create_addr_space().
In many cases, the application 
will simply want to pass the address of unw_nto_accessors
as the 
first argument to this routine. Doing so will ensure that 
libunwind
will be able to properly unwind the target process. 
However, in special circumstances, an application may prefer to use 
only portions of the unw_nto\-facility.
For this reason, the 
individual callback routines (unw_nto_find_proc_info(),
unw_nto_put_unwind_info(),
etc.) are also available for direct 
use. Of course, the addresses of these routines could also be picked 
up from unw_nto_accessors,
but doing so would prevent static 
initialization. Also, when using unw_nto_accessors,
\fIall\fP
the callback routines will be linked into the application, even if 
they are never actually called. 
.PP
The process\-ID (pid) of the target process must be known, 
and only a single thread can be unwound at a time so the thread\-id (tid) 
must also be specified. 
A unw_nto\-info\-structure
can be created 
by calling unw_nto_create(),
passing the pid and tid of the target 
process thread as the arguments. 
This will stop the target thread. 
The returned void\-pointer then needs to be 
passed as the ``argument\&'' pointer (third argument) to 
unw_init_remote().
.PP
The unw_nto_resume()
routine can be used to resume execution of 
the target process after unwinding. 
.PP
When the application is done using libunwind
on the target 
process, unw_nto_destroy()
needs to be called, passing it the 
void\-pointer that was returned by the corresponding call to 
unw_nto_create().
This ensures that all memory and other 
resources are freed up. 
.PP
.SH THREAD SAFETY

.PP
The unw_nto\-facility
assumes that a single unw_nto\-info
structure is never shared between threads of the unwinding program. 
Because of this, 
no explicit locking is used. 
As long as only one thread uses a unw_nto\-info
structure at any given time, 
this facility is thread\-safe. 
.PP
.SH RETURN VALUE

.PP
unw_nto_create()
may return a NULL
pointer if it fails 
to create the unw_nto\-info\-structure
for any reason. 
.PP
.SH FILES

.PP
.TP
libunwind\-nto.h
 Headerfile to include when using the 
interface defined by this library. 
.TP
\fB\-l\fPunwind\-nto \fB\-l\fPunwind\-generic
 Linker\-switches to add when building a program that uses the 
functions defined by this library. 
.PP
.SH SEE ALSO

.PP
libunwind(3),
.PP
.\" NOTE: This file is generated, DO NOT EDIT.
